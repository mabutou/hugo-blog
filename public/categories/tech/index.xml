<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech on Mabutou&#39;s Blog</title>
    <link>https://butou.ma/categories/tech/</link>
    <description>Recent content in Tech on Mabutou&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 May 2020 20:00:02 +0800</lastBuildDate><atom:link href="https://butou.ma/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 小程序实现 Windows 平台临时启动特定端口</title>
      <link>https://butou.ma/posts/golang-port/</link>
      <pubDate>Tue, 19 May 2020 20:00:02 +0800</pubDate>
      
      <guid>https://butou.ma/posts/golang-port/</guid>
      <description>exe 下载链接： winport.exe
偶尔需要测试某台主机的端口的防火墙策略是否生效，需要在机器上临时启动对应端口。
Linux 和 macOS 上都能用 netcat 很方便的用一条命令启动一个本地端口。 比如 1081 端口：
nc -l 1081 但在 Windows 平台没有预装 netcat , 找了几个安装包，使用起来也有问题。
就用 go 写了个小程序，通过启动参数自定义端口，在对应端口上启动一个 http 服务。
winport.go 代码：
package main import ( &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;flag&amp;quot; ) var cliport = flag.Int(&amp;quot;p&amp;quot;, 8888, &amp;quot;please input port&amp;quot;) func main() { flag.Parse() http.HandleFunc(&amp;quot;/&amp;quot;, HelloServer) http.ListenAndServe(fmt.Sprintf(&amp;quot;:%d&amp;quot;, \*cliport), nil) } func HelloServer(w http.ResponseWriter, r \*http.Request) { fmt.Fprintf(w, &amp;quot;Hello, %s!&amp;quot;, r.URL.Path\[1:\]) } 编译为 exe 程序
GOOS=windows GOARCH=amd64 go build -o winport.</description>
    </item>
    
    <item>
      <title>国内主机配置 k8s 的注意事项及如何正确设置代理</title>
      <link>https://butou.ma/posts/k8s-proxy/</link>
      <pubDate>Sat, 23 Nov 2019 19:58:29 +0800</pubDate>
      
      <guid>https://butou.ma/posts/k8s-proxy/</guid>
      <description>最近学习 kubernetes，在公司三台 centos7 服务器上用 kubeadm 部署 k8s 测试环境。
过程中有些注意事项，提前避开能节省很多时间。
 1. 安装指定 docker 版本
  kubeadm 对 docker 版本的支持有限，目前只支持到 18.09
  直接装最新版的会在后面步骤里报错，还得重装一次。
  2. 某些教程里使用的是旧版 kubeadm ，对应的 weave 安装命令也是旧版的
 我装的最新版 kubeadm (1.16)，发现装 weave 时遇到版本问题。 用下面命令装的 ：  kubectl apply -f &amp;quot;https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d &#39;\\n&#39;)&amp;quot; 3. 正确设置代理（重要）。
  本来 kubeadm 部署 k8s 很简单，但国内无法正常访问 gcr.io 。很多人被拉取 gcr.io 镜像时的网络问题卡住。
  linux 下在终端用 setproxy 或 sethttp 命令设置的代理对 docker pull 无效。需要额外设置。</description>
    </item>
    
    <item>
      <title>解决 vultr 恢复历史快照后，莫名断网问题</title>
      <link>https://butou.ma/posts/vultr-network/</link>
      <pubDate>Tue, 22 Oct 2019 19:57:38 +0800</pubDate>
      
      <guid>https://butou.ma/posts/vultr-network/</guid>
      <description>这算是 vultr 机器的老问题了，不明白为啥 vultr 一直没解决。
 起因   之前服务器中了一个俄罗斯的病毒，其实没啥影响，几下解决后，总感觉不舒服可能有其他残留毒素。
  看了下最新的快照列表，中毒前后没什么大的数据更改。干脆直接恢复快照好了。
  经过   以前也恢复过很多次快照，很顺利，这次恢复后，ssh 直接连不上。
  用 ping 工具测试，发现无论海内还是海外，一片红。那显然是机器出问题了。
  无奈只好进 vultr 后台用 vnc 方式登陆。
  搞半天没解决。一谷歌是 vultr 老问题了，恢复快照后，偶尔会发生网卡异常。
  需要手动修改下配置文件。 这篇文章里有详细分析和解决过程 https://zhuanlan.zhihu.com/p/52989069
Centos 配置文件和 Ubuntu/Debian 略有不同。
手动修改步骤谷歌能找到对应的一堆文章，我就不写了。（主要是懒，有空闲的时候再补上吧）
结果 这次修复好了，以后还是有几率出现同样问题。
所以最好在机器正常时放一个修复脚本再创建快照，免去后顾之忧。快照本身如果没有这个脚本，恢复后遇到断网也是不能直接连到外网下载脚本的。
脚本地址：https://github.com/leitbogioro/fix_deviant_NIC</description>
    </item>
    
    <item>
      <title>群晖系统提示硬盘损毁后提取硬盘数据</title>
      <link>https://butou.ma/posts/nas-data/</link>
      <pubDate>Tue, 22 Oct 2019 19:56:47 +0800</pubDate>
      
      <guid>https://butou.ma/posts/nas-data/</guid>
      <description>群晖系统在安装新硬盘时需要进行硬盘的初始化，支持 ext4 或者 btrfs 两种文件系统。（我用的 brtfs）
群晖在检测到硬盘健康状况不太好时，容易提示硬盘损毁，此时在群晖系统内无法读写硬盘内容了。一般重新格式化或者修复下坏道就能继续正常用。
此时如果想要先取出其中的文件只能用其他系统。这两种格式都不能直接在 Mac 系统或者 windows 系统里正常读取。
不过可以用 Linux 系统读取。
以 Ubuntu 为例：
使用虚拟机直接装一个 Ubuntu。或者制作 u 盘启动盘，进入 LiveCD 模式启动电脑。
推荐使用虚拟机
我用的 Mac 上的 Parallels，VMware 当然也行。
进入系统后打开终端并以 root 身份（sudo -i）执行以下操作：
 apt-get update apt-get install mdadm lvm2 btrfs-prog mdadm -Asf &amp;amp;&amp;amp; vgchange -ay  然后在文件管理器内就能看到对应的盘，文件数量少的话，直接手动选择复制就行。
 以上步骤随手一谷歌就能在网上找到，以下才是重点。
 在文件浏览器里可以直接批量复制，刚开始我是 smb 协议链接到 nas 去，进行远程复制。
然而会遇到 @开头的文件夹，此时会提示是否跳过，这种文件夹很多，一直点很烦，不点就会卡在那。而且测试后发现，smb 协议速度一般。
所以我直接先用 Mac 的 Finder 用 afp 协议链接到 nas，在 Ubuntu 终端内用 rsync 复制的，直接排除掉 @开头文件夹，速度也快很多。</description>
    </item>
    
    <item>
      <title>macOS 小脚本-批量复制指定目录下特定类型文件</title>
      <link>https://butou.ma/posts/macos-shell/</link>
      <pubDate>Wed, 18 Sep 2019 19:53:55 +0800</pubDate>
      
      <guid>https://butou.ma/posts/macos-shell/</guid>
      <description>github: https://github.com/mabutou/macOS_copyScript
 使用场景： 比如我想将某个目录下的几百个 .md 文件（分布在数十个多级子文件夹内），全部集中到一个单独的文件夹内。
 Linux 系统上可以用一条 find 和 cp 组合命令直接完成。 然而 macOS 上命令貌似不太兼容，就写了个小脚本，只在 Mac 上试了，Linux 估计也适用。  使用方法：  按个人需求修改下方脚本内对应的路径和格式名。创建成 sh 文件放到对应目录。比如叫 copyScript.sh。 若要保留文件夹层级，只是为了过滤文件。则删除倒数 7、8 行注释，同时注释掉倒数第 5 行。 使用 sh copyScript.sh 命令执行即可。  #!/bin/bash #修改IFS变量，将分割字段的字符改为换行符，默认IFS变量含有空格，后续命令会识别不了含有空格的文件夹和文件名 IFS=$&amp;#39;\\n&amp;#39; #递归过滤当前目录及子目录的所有指定格式文件，默认为md，按需修改 head\_files=\`find ./ -name &amp;#34;\*.md&amp;#34; -print\` #设置目标文件夹 des\_dir=&amp;#34;/Users/XXX/Downloads/md&amp;#34; echo $des\_dir #如果没有对应目标文件夹就创建 \[ -d $des\_dir \] || mkdir -p $des\_dir &amp;amp;&amp;gt; /dev/null #按行读取文件路径 for file in $head\_files do source\_dir=${file#./} echo $source\_dir; #是否保留文件夹层级 #\[ -d $des\_dir$source\_dir \] || mkdir -p $des\_dir$source\_dir #cp -p &amp;#34;$file&amp;#34; $des\_dir$source\_dir #执行复制命令 cp -p &amp;#34;$file&amp;#34; $des\_dir ((file\_count++)) done echo &amp;#34;复制完毕?</description>
    </item>
    
    <item>
      <title>个人Chrome扩展推荐</title>
      <link>https://butou.ma/posts/chrome-plugin/</link>
      <pubDate>Wed, 11 Sep 2019 19:50:56 +0800</pubDate>
      
      <guid>https://butou.ma/posts/chrome-plugin/</guid>
      <description>第一次使用谷歌浏览器是刚上高中时，距现在已有十年了。
自从知道 Chrome 有自己的应用商店可以安装各种功能的扩展后，就基本没换过其他浏览器了。
十年间用过无数扩展，感觉有必要写篇文章推荐下最终留下来的这些。
某些扩展功能比较冷门，下面只介绍比较通用的。
Tampermonkey 油猴扩展作为脚本管理器比较特殊，会单独写一篇进行介绍和推荐对应的脚本。
 所有扩展截图（查看大图） 必装扩展推荐（点击名称可跳转到应用商店页面） Extensity
 管理扩展的扩展。 扩展装的太多后，会拖慢电脑运行速度，某些扩展只是特定场景使用，所以有必要用一个管理器进行管理。 界面简洁，支持分组和一键关闭或启用单个及某组扩展。  Tampermonkey
 专门管理和运行 JS 脚本的扩展，非常强大。 需配合各种脚本使用，所以会单写一篇介绍。  Dark Reader
 可以为那些不支持黑暗模式的网站自动生成黑暗模式配色，也可以在 UI 界面自定义黑暗效果。 专业用户还可以编辑 css 文件针对不同网站进行定制。  uBlock Origin
 网页广告拦截器。 优点是内存和 CPU 占用低（相比于其他同类扩展）。  Imagus
 看图利器 鼠标悬停在图片上时，会自动弹出分辨率更高的原图，不需要额外点击。  OneTab
 打开太多的标签页时，单击 OneTab 图标，一键将所有标签页转换成一个列表。 需要再次访问这些标签页时，也可以单独或全部一键恢复。  xStyle
 可以为各种网站创建 css 文件进行页面样式定制 同类软件有 Stylus，这款 UI 更现代些。 样式文件可以去专门网站安装，有很多网友共享的  比如 https://userstyles.org    I’m a Gentleman</description>
    </item>
    
    <item>
      <title>如何在不同音乐平台间迁移歌单</title>
      <link>https://butou.ma/posts/music-trans/</link>
      <pubDate>Sun, 18 Aug 2019 19:49:20 +0800</pubDate>
      
      <guid>https://butou.ma/posts/music-trans/</guid>
      <description>点击下载觉哥歌单文本文件（共 365 首）：jueSpotifyPlaylist.csv
 起因：刷微博看到黄觉分享了一个 Spotify 歌单二维码，发现评论里好多人没用过 Spotify。反正睡不着，顺手写篇相关教程。
  我各种音乐平台都用过，其中网易云重度用户，累计听歌量两万三  但网易云在 iPhone 上不能在锁屏后用 Siri 直接唤醒放歌（对 AirPods 支持也不行），故最近转移到 Apple Music 了。（转移了六千首过去）   也为了防止单一平台版权原因下架，系统研究了一下各平台的迁移方法
 先写 Spotify 转 Apple Music，网易云转 Apple Music 复杂些有空再更新。（其余 QQ 音乐 / 虾米音乐之类都比较简单，不一定写了）
 Spotify 迁移至 Apple Music   以觉哥的歌单为例，先把二维码解析为链接
 先用 Spotify 手机端扫描微博那张图，用右上角自带分享功能得到歌单链接：https://open.spotify.com/user/huangjue6766/playlist/2lfNXg1139huYYskKclWjD?si=whfaAAhjROihSAOYbykDOw    打开 tunemymusic 网站，网址 https://www.tunemymusic.com/zh-cn/
  点击开始，选择来源为 Spotify
    上面的链接贴进去
    然后按照提示，点下一步，选择目的地为 Apple Music</description>
    </item>
    
    <item>
      <title>「碎片化信息流的聚合与输出」Rsshub &#43; Reeder &#43; Notion</title>
      <link>https://butou.ma/posts/rsshub/</link>
      <pubDate>Sat, 20 Apr 2019 19:43:29 +0800</pubDate>
      
      <guid>https://butou.ma/posts/rsshub/</guid>
      <description>19.10.05 update:
1. 之前在服务器端部署的 ttrss 用一段时间后感觉太臃肿，已更换为轻量级的 Miniflux，直接用 Docker 部署在 nas 上的。支持 Reeder ，安装过程也更简单。
https://github.com/miniflux/miniflux
2. 迫于 Typora 一直没有 iOS 端，笔记应用迁移到 Notion ，目前有教育优惠，用教育版邮箱注册直接免费。
3. Typora 里 md 文件有点多。迁移到 Notion 时，直接导入会造成 md 文件内引用的本地图片丢失。所以先用命令行工具 pandoc 批量转换为 docx 格式文件。再导入 Notion。pandoc 转换文档时可以指定 css 文件进行样式渲染。
4. 由于 md 文件散布在不同文件夹，写了个 bash 脚本进行批量汇总及转换。
汇总脚本详情见博文：小脚本-批量复制指定目录下特定类型文件
汇总 + 转换 + 保留文件夹层级功能脚本点此下载：pandoc.sh
Notion 界面简洁，功能也挺强
19.08.14 update:
1. 文内提到的 RSSHub 的开发者已开发了对应的 Chrome 扩展，可以直接检测页面是否支持 RSS，并一键订阅到阅读器。https://github.com/DIYgod/RSSHub-Radar
2. RSS 阅读器 Inoreader 转为付费的 Reeder 4。并链接到服务器端部署的 ttrss（开源的，支持过滤器）。</description>
    </item>
    
    <item>
      <title>macOS 玄学 bug — 音频输出异常&#43;切换左桌面快捷键失灵 || &#39;Move left a space&#39; shortcuts not working</title>
      <link>https://butou.ma/posts/macos-bug/</link>
      <pubDate>Tue, 19 Mar 2019 19:40:33 +0800</pubDate>
      
      <guid>https://butou.ma/posts/macos-bug/</guid>
      <description>我的系统版本：10.13.5
音频输出异常  平时正常，每次连接一款蓝牙耳机后，如果打开多个在输出音频的应用，暂停其中一个，其他应用的声音也会消失。 偶尔出现浏览器视频播放失败，听歌软件无法播放（我用的网易云）。  解决方法：
 启动终端，输入命令:  sudo killall coreaudiod
 回车即可 (可能需要输入密码)  切换桌面快捷键失灵  设置选项里可以将切换快捷键（Mission Control）设置为其他组合键，如 Ctrl + 1 。但是如果其他快捷键设置过同样的组合键，即使没有激活，也会导致左切换快捷键失效（Move left a space），神奇的是右切换不受影响。  解决方法：
  先将其他一样的快捷键设置为另外的组合
  启动终端输入下面命令，回车即可
  killall Dock</description>
    </item>
    
    <item>
      <title>Mac 版 Anki 安装 AnkiConnect 插件后连接失败解决方法</title>
      <link>https://butou.ma/posts/ankiconnect/</link>
      <pubDate>Thu, 15 Nov 2018 19:39:14 +0800</pubDate>
      
      <guid>https://butou.ma/posts/ankiconnect/</guid>
      <description>最近使用 Anki 记忆 COCA 词汇时，碰到此问题。  使用 Chrome 上的 Anki 取词插件（比如我用的 Online Dictionary Helper） 时，将单词添加至新卡片的功能需要依靠 AnkiConnect 插件连接桌面客户端与取词插件。 由于 Mac 系统的机制，会导致 Anki 客户端处于后台时，AnkiConnect 的进程被挂起。 结果是取词插件设置页面检测不到 AnkiConnect，或者检测到并设置好后短时间内连接又断开。 打开终端执行下面三行命令  解决方法如下：
defaults write net.ankiweb.dtop NSAppSleepDisabled -bool true defaults write net.ichi2.anki NSAppSleepDisabled -bool true defaults write org.qt-project.Qt.QtWebEngineCore NSAppSleepDisabled -bool true  重启 Anki 客户端  官方文档原文： Notes for Mac OS X Users Starting with Mac OS X Mavericks, a feature named App Nap has been introduced to the operating system.</description>
    </item>
    
    <item>
      <title>Google账号数据迁移指南</title>
      <link>https://butou.ma/posts/chrome-trans/</link>
      <pubDate>Wed, 16 May 2018 19:36:47 +0800</pubDate>
      
      <guid>https://butou.ma/posts/chrome-trans/</guid>
      <description> 我有两个 Google 账号，旧的那个 2008 年高中时注册的，已经十年了，但是 id 是当时随意取的。新账号前几年注册的，很好记，但一直懒得迁移数据就放那没用。 昨天花了好几个小时，终于完成了数据迁移。过程中有好几个地方可以使用谷歌自带的功能完成，节省很多时间。 当然相比之下，还是微软账号迁移方便，直接在原账号基础上关联一个别名 ID，然后把新的别名 ID 设置为主 ID 就搞定了，几分钟完成。  Google 不支持别名 ID，只好手动导数据。  Chrome 的数据最重要，里面有三千多书签，上百个网站的账号密码，几十个插件和应用，和主题。  直接退出 pc 端旧账号（本地会保留数据），然后登陆新账号进行同步即可。 可能会发生同步错误问题，得去掉同步项最后的 “Credit cards and addresses using Google Pay” ，详情参考另一篇博文 解决 Chrome 浏览器同步失败问题   谷歌相册，里面有我三千多张照片，如果全下载下来再上传到新账号，得花很久时间。研究了一下，可以使用自带功能，将新账号作为家庭账号关联在一起，将当前所有照片共享过去，登录新账号后，全选保存到内容库，就能全部迁移过去。 谷歌网盘，与相册类似，直接共享所有文件至新账号，新账号保存到自己盘里。 Google keep 同上。 gmail 设置项里有迁移功能，将收到的所有邮件全部迁移到新账号。 通讯录，导出为本地文件后，登录新账号，切换到旧版界面完成导入。 YouTube 订阅列表，这个没找到比较方便的方法，手动重新关注的。   备注：谷歌提供归档功能，可以将账号内的所有服务的数据生成一个压缩文件下载到本地。链接： https://takeout.google.com/settings/takeout
 </description>
    </item>
    
    <item>
      <title>解决 Chrome 浏览器同步失败问题</title>
      <link>https://butou.ma/posts/chrome-sync/</link>
      <pubDate>Wed, 16 May 2018 19:33:35 +0800</pubDate>
      
      <guid>https://butou.ma/posts/chrome-sync/</guid>
      <description> update：经测试，69 beta 版 Chrome 已解决此问题
 近日把旧的 Google 账号上的资料迁移到新账号上，迁移相册邮件等都没遇到啥问题，最后在同步浏览器数据时一直成功不了。  退出旧账号的同时保留数据在 pc 端，然后登陆新账号，pc 端的本地数据会上传到新账号上，通过 https://chrome.google.com/sync?hl=en-US 能够查询到已经全部上传至服务器端。 此时我用其他设备（MacBook Pro 和 安卓手机端） Chrome 登陆新账号后，始终不能把服务器端数据同步到本地。 尝试各种方法后，在论坛上找到了解决方法：  打开同步选项，先关闭同步所有选项，再手动分别打开各个同步项，除了最后那个 “Credit cards and addresses using Google Pay”。 然后就能顺利同步了，具体原理不清楚，估计是 Google Pay 的同步逻辑与 Chrome 有冲突。   论坛链接：https://productforums.google.com/forum/#!topic/chrome/JLsH2Aeg9_Y  </description>
    </item>
    
    <item>
      <title>Mac OS 下解决 SanDisk CZ80 掉速问题</title>
      <link>https://butou.ma/posts/sandisk-cz80/</link>
      <pubDate>Thu, 09 Nov 2017 19:28:23 +0800</pubDate>
      
      <guid>https://butou.ma/posts/sandisk-cz80/</guid>
      <description>CZ80 速度很快可以用来做 win to go 系统。但由于主控原因，用久了会明显掉速。 想要恢复原本速度，可以直接全盘写零进行还原。格式化是没用的。  命令步骤如下：
在终端中查询磁盘编号：
bash diskutil list
确认编号（如 diskX）后（注意大小写），全盘写零：
bash diskutil zeroDisk /dev/diskX
过程可能有点慢，进度条走完就好了。</description>
    </item>
    
  </channel>
</rss>
